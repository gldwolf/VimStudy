在命令行下：
Ctrl + H	删除上一个字符
Ctrl + W	删除上一个单词
Ctrl + V	删除光标所在行
Ctrl + A	快速移动到行首
Ctrl + E	快速移动到行尾


在 vim 下：
gi	快速跳转到最后一次编辑的地方，并进行插入模式

Vim 快速移动：
w/W	移动到下一个 word/WORD 开头
e/E	移动到下一个 word/WORD 结尾
b/B	移动到上一个 word/WORD 开头

Note: word 是指以非空白符分割的单词，WORD 是指以空白符为分割的单词

行间的搜索移动：
使用 f{char} 来将光标快速的移动到 char 字符上，t 移动到 char 的前一个字符
如果第一次不是想要定位的字符，可以用分号 ";" 或者 "," 继续搜索该行的下一个/上一个
大写的 F{char} 表示反向来进行搜索 char
例如：想搜索本行中的 "g" 字符，可以使用 "fg" 快速定位到 "g" 这个字符上

Vim 的水平移动
0 移动到行首的第一个字符，^ 移动到行首的第一个非空白字符
$ 移动到行尾，g_ 移动到行尾非空白字符
记住常用的 0 和 $ 基本上就可以满足日常需求了

Vim 的垂直移动
使用 () 来在句子间进行移动，可以使用 :help ( 来查看帮助文档
使用 {} 来在段落间进行移动
我们可以使用 easy-motion 插件来进行移动，这样这些命令就可以不用记了

Vim 页面移动
翻页的命令太多，2/8 定律，记住常见的就能满足需求
gg	移动到文件的开头
G	移动到文件的结尾
Ctrl + o	快速返回
H/M/L	跳转到屏幕的开头(Head)，中间(Middle)，结尾(Lower)
Ctrl + u	向上翻页(upward)
Ctrl + f	向下翻页(forward)
zz	把屏幕置为中间

Vim 的增删改查
x	快速删除一个字符
d	配合文本对象快速删除一个单词 daw(d around word)
d 和 x 都可以搭配数字来执行多次
例: 
	dw	删除一个单词的光标所在字符及其后的单词部分及空白字符，注意，单词的前半部分不删除
	diw	删除一个单词，但不包括其周围的空格
	daw	删除一个单词及其周围的空格，与 dw 一样 
	dt{char}	从当前光标处删除到 {char} 不包括 char 所在字符，但包括光标所在字符
	x	删除光标所在字符
	3x	表示删除光标及其后的总共 3 个字符
	X	删除光标所在字符的前一个字符
	3X	表示删除光标所在字符的前 3 个字符
	dd	删除光标所在行
	3dd	删除光标所在行及其后的总共 3 行
		
Vim 的快速修改
常用的命令有 3 个：r(replace), c(change), s(substitute)
r	替换光标所在字符
R	进行替换模式，一直替换后面的字符
s	删除当前字符并进入插入模式
4s	删除光标所在字符及其后的 3 个字符并进入插入模式
S	将光标所在行内容删除并进入插入模式
4S	删除光标所在行及其后的 3 行并进行插入模式
c	配合文本对象进行快速修改
	例：
	cw	删除光标所在字符及其后的单词部分及空白字符，注意，光标所在的单词的前半部分不删除
	caw	删除光标所在单词及周围空白符，并进入插入模式
	ciw	删除光标所在单词并进入插入模式
	ct{char}	删除至 char 并进入插入模式

C	删除光标所在行并进入插入模式

Vim 查询
/	进行正向搜索
?	进行反向搜索
n	跳转至下一个匹配的对象
N	跳转至上一个匹配的对象
*	匹配当前单词的下一个对象
#	匹配当前单词的上一个对象


Vim 如何进行搜索替换(支持正则表达式)	
格式：:[range]s[ubstitute]/{pattern}/{string}/[flags]
range	表示范围 比如：10, 20 表示 10-20 行，% 则表示全部
flags	表示替换位标志
	g(global)	表示全局范围内执行
	c(confirm)	表示确认，可以确认或者拒绝修改
	n(number)	执行匹配到的次数而不替换，可以用来查询匹配次数 例如：":%s/char//n"

Vim 的多文件操作
Buffer	是指打开的一个文件的内存缓冲区
	Buffer - 什么是缓冲区
	vim 打开一个文件之后会加载文件内容到缓冲区，之后的修改都是针对内存中的缓冲区，并不会直接保存到文件，直到我们使用 :w 的时候才会把修改的内容写入到文件中
	如何在 Buffer 之间进行切换：
	使用 :ls 会列举当前缓冲区，然后使用 :b n 跳转到第 n 个缓冲区
	:bpre	跳转到上一个缓冲区
	:bnext	跳转到下一个缓冲区
	:bfirst	跳转到第一个缓冲区
	:blast	跳转到最后一个缓冲区
	:b buffer_name 加上 tab 来进行补全，跳转到指定名字的 Buffer
Window	是 Buffer 的可视化的分割区域
	一个缓冲区可以分割成多个窗口，每个窗口也可以打开不同的缓冲区

Tab	可以组织窗口为一个工作区


